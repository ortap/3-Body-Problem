# -*- coding: utf-8 -*-
"""Energy_Comparison

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_-Leo4CkubMTHjExCDxzJtcAqeTWr_qu
"""

import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
from scipy.integrate import odeint
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import brentq

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

m1 = 1.99e3 # Mass of Sun [kg]
m2 = 1.99e30 #5.97e24 # Mass of Earth [kg]
m3 = 0 # Mass of Moon [kg]
G = 6.67e-11 # m^3/kg-s^2
e=0.1
duration = 24*3600*1000 # s
h = 0.01*3600 # s
num_steps = int(duration / h)


##Simplectic
r=np.zeros([num_steps+1])
v=np.zeros([num_steps+1])
U_symplectic=[]
r[0]=1
v[0]=0


def acceleration(r):
  def nle(u):
    return u-e*np.sin(u)-step
  root= brentq(nle, 0, 2e10)
  r_=.5*(1-e*np.cos(root))
  a=-r*G*m1/(r**2+r_**2)**(3/2) #r is z
  U_symplectic = 2*G*m1/(r_**2+r**2)**.5 #Calculate the Potential Energy
  return np.array([a,U_symplectic])

for step in range (num_steps):
    
    v[step+1] = v[step] + h*acceleration(r[step])[0]
    r[step+1] = r[step] + h*v[step+1]
    U_symplectic.append(-1*acceleration(r[step+1])[1])


##RK2/RK4
def f(r4,t):
  z=r4[0]
  vz=r4[1]
  dzdt=vz
  def nle(u):
    return u-e*np.sin(u)-t
  root= brentq(nle, 0, 2e10)
  r_=.5*(1-e*np.cos(root))
  dvdt=-z*G*m1/(z**2+r_**2)**(3/2)
  U_RK4 = 2*G*m1/(r_**2+r4[0]**2)**.5 #Calculate the Potential Energy
  return np.array([dzdt,dvdt,U_RK4],float)
  
rpoints,U_RK4= [],[]
r4= np.array([1,0],float)


tpoints= np.arange(0,duration,h)
for t in tpoints:
    neww=r4.copy()
    rpoints.append(neww)

    k1 = h*f(r4,t)[0:2]
    k2 = h*f(r4+0.5*k1,t+0.5*h)[0:2]
    
    #Uncomment for RK4
    #k3 = h*f(r4+0.5*k2,t+0.5*h)[0:2]
    #k4 = h*f(r4+k3,t+h)[0:2]
    #r4 += (k1+2*k2+2*k3+k4)/6
    r4+=k2
    #U_RK4.append(f(r4,t)[1]/(-r4[0]))#Acceleration divided by current position is the PE
    U_RK4.append(-1*f(r4,t)[2])
rpoints2=np.array(rpoints)
v_RK4 = rpoints2[:,1]

#KE
T_symplectic= .5*np.square(v)
T_RK4 = .5*np.square(v_RK4)
T_symplectic_ = T_symplectic
axes7 = plt.gca()
axes7.set_xlabel('Time')
axes7.set_ylabel('KE')
axes7.plot(tpoints,T_symplectic_[0:100], label="Symplectic")
axes7.plot(tpoints,T_RK4[0:100], label="RK4")
axes7.figure.set_size_inches(30, 12)
plt.legend()

#KE Average
from numpy import arange,array,ones
from scipy import stats

slope_symp, intercept_symp, r_value_symp, p_value_symp, std_err_symp = stats.linregress(tpoints,T_symplectic[:-1])
line_symp = slope_symp*tpoints+intercept_symp
slope_RK4, intercept_RK4, r_value_RK4, p_value_RK4, std_err_RK4 = stats.linregress(tpoints,T_RK4)
line_RK4 = slope_RK4*tpoints+intercept_RK4

axes10 = plt.gca()
axes10.set_xlabel('Time')
axes10.set_ylabel('Average KE')
axes10.plot(tpoints,line_symp, label="Symplectic")
axes10.plot(tpoints,line_RK4, label="RK4")
plt.legend()

#PE
U_symplectic_ = np.transpose(np.array([U_symplectic]))
U_RK4=np.array(U_RK4)
U_diff = U_symplectic_-U_RK4
axes8 = plt.gca()
axes8.set_xlabel('Time')
axes8.set_ylabel('PE')
axes8.plot(tpoints[-1000:],U_symplectic_[-1000:], label="Symplectic")
axes8.plot(tpoints[-1000:],U_RK4[-1000:], label="RK4")
plt.legend()
print(U_symplectic_.shape)

#Conservation of energy
Mech_symplectic = U_symplectic+ T_symplectic_[:-1]
Mech_RK4 = U_RK4 + T_RK4
axes4 = plt.gca()
axes4.set_xlabel('Time')
axes4.set_ylabel('Mechanical Energy')
axes4.plot(tpoints[-1000:],Mech_symplectic[-1000:], label="Symplectic")
axes4.plot(tpoints[-1000:],Mech_RK4[-1000:], label="RK2")
plt.legend()
print(Mech_symplectic.shape)

#Energy Average

from numpy import arange,array,ones
from scipy import stats

slope_symp_E, intercept_symp_E, r_value_symp_E, p_value_symp_E, std_err_symp_E = stats.linregress(tpoints,Mech_symplectic)
line_symp_E = slope_symp*tpoints+intercept_symp
slope_RK4_E, intercept_RK4_E, r_value_RK4_E, p_value_RK4_E, std_err_RK4_E = stats.linregress(tpoints,Mech_RK4)
line_RK4_E = slope_RK4_E*tpoints+intercept_RK4_E
#T_diff=T_symplectic_-T_RK4
axes10 = plt.gca()
axes10.set_xlabel('Time')
axes10.set_ylabel('Average Mechanical Energy')
axes10.plot(tpoints,line_symp_E, label="Symplectic")
axes10.plot(tpoints,line_RK4_E, label="RK2")
#axes10.plot(tpoints,np.full(T_RK4.shape,KE_Avg_RK4), label="RK2")
#axes10.figure.set_size_inches(30, 12)
plt.legend()

#Plots for RK4
axes6 = plt.gca()
axes6.set_xlabel('Time')
axes6.set_ylabel('Mechanical Energy')
axes6.plot(tpoints,T_RK4, label="KE")
axes6.plot(tpoints,U_RK4, label="PE")
axes6.plot(tpoints,Mech_RK4, label="Total")
plt.legend()

