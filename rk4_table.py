# -*- coding: utf-8 -*-
"""RK4_shai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M_w9WXjLlrU5mKhRnzbN-C4tsqdHgsrd
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


m1 = 1.99e30 # 1.99e30 # Mass of Sun [kg]
m2 = 1.99e30 #5.97e24 # Mass of Earth [kg]
m3 = 0 # Mass of Moon [kg]
G = 6.67e-11 # m^3/kg-s^2

duration = 10*365.26*24*3600 # s
h1 = 3600*75 # s
C = [64, 1, 2, 4, 8, 16, 32]
# H = [h1/24, h1, h1/2, h1/4]  # [benchmark, stepsize1, stepsize2,.....]


    
def acceleration(r):
    a = np.zeros([3,3])
    a[0] = G*m2/np.linalg.norm(r[0]-r[1])**3*(r[1]-r[0])+G*m3/np.linalg.norm(r[0]-r[2])**3*(r[2]-r[0])#
    #print(a[0].shape)
    a[1] = G*m1/np.linalg.norm(r[1]-r[0])**3*(r[0]-r[1])+G*m3/np.linalg.norm(r[1]-r[2])**3*(r[2]-r[1])
    a[2] = G*m1/np.linalg.norm(r[2]-r[0])**3*(r[0]-r[2])+G*m2/np.linalg.norm(r[2]-r[1])**3*(r[1]-r[2])
    #print(a)
    return a

##RK4
def f(r,t):
    r,v = r[:3],r[3:]
    drdt=v
    dvdt[0] = G*m2/np.linalg.norm(r[0]-r[1])**3*(r[1]-r[0])+G*m3/np.linalg.norm(r[0]-r[2])**3*(r[2]-r[0])#
    dvdt[1] = G*m1/np.linalg.norm(r[1]-r[0])**3*(r[0]-r[1])+G*m3/np.linalg.norm(r[1]-r[2])**3*(r[2]-r[1])
    dvdt[2] = G*m1/np.linalg.norm(r[2]-r[0])**3*(r[0]-r[2])+G*m2/np.linalg.norm(r[2]-r[1])**3*(r[1]-r[2])
    #print([cat].shape)
    cat=np.concatenate((drdt, dvdt), axis=0)
    #print(cat.shape)
    return cat



r5 = []

for c in C:
  rpoints=[]
  dvdt = np.zeros([3,3])
  
  #Planet 1 [x,y,z] Planet2 [x,y,z] Planet3 [x,y,z] lanet 1 [vx,vy,vz] Planet2 [vx,vy,vz] Planet3 [vx,vy,vz]
  
  r= np.array([[-1e11, 0, 0], [1e11, 0, 0.], [0, 0, 1e11],[0, -1*np.sqrt(G*m1/(2e11))/2, 0] , [0,1*np.sqrt(G*m1/(2e11))/2, 0], [0, 0, 0] ]) 
  h = h1/c
  
  #print("step size: ",h)
  
  num_steps = int(duration / h)

  tpoints= np.arange(0,duration,h)
  for t in tpoints:
      neww=r.copy()
      rpoints.append(neww)
      if t == tpoints[5*c]:
        #print(t)
        #print(neww)
        r5.append(neww) # r @ the 5th time step

      k1 = h*f(r,t)
      k2 = h*f(r+0.5*k1,t+0.5*h)
      k3 = h*f(r+0.5*k2,t+0.5*h)
      k4 = h*f(r+k3,t+h)

      r += (k1+2*k2+2*k3+k4)/6
      
rpoints2=np.stack(rpoints)

axes = plt.gca()
axes.set_xlabel('x in m')
axes.set_ylabel('y in m')
axes.plot(tpoints, rpoints2[:, 2, 1], label="Satellite")

plt.axis('equal')
plt.legend()

x5 = []
y5 = []

len_C = len(C)
Err = np.zeros((len_C, 4),dtype = float)
index = []

for i in range(len(r5)):
  x5.append(r5[i][0][0])
  y5.append(r5[i][0][1])
  stepsize = C[i]
  index.append("h1/{}".format(stepsize))
  if i > 0:
    err_x = abs(x5[i] - x5[0])
    Err[i][0] = err_x
    err_y = abs(y5[i] - y5[0])
    Err[i][1] = err_y
    err = np.sqrt(err_x**2+err_y**2)
    Err[i][2] = err
    error_ratio = Err[i-1][2]/Err[i][2]
    Err[i][3] = error_ratio

df = pd.DataFrame(Err, columns=["Error in x", "Error in y", "Error", "Error Ratio(RK4)"],index=index)
first_row = "h1/{}".format(C[0])
df.drop([first_row])

x5 = []
y5 = []

len_C = len(C)
Err = np.zeros((len_C, 3),dtype = float)
index = []

for i in range(len(r5)):
  x5.append(r5[i][0][0])
  y5.append(r5[i][0][1])
  stepsize = C[i]
  index.append("h1/{}".format(stepsize))
  if i > 0:
    err_x = abs(x5[i] - x5[0])
    err_y = abs(y5[i] - y5[0])
    x = r5[i][0][0]
    y = r5[i][0][1]
    r = [x, y]
    Err[i][0] = np.linalg.norm(r)
    err = np.sqrt(err_x**2+err_y**2)
    Err[i][1] = err
    error_ratio = Err[i-1][1]/Err[i][1]
    Err[i][2] = error_ratio

df = pd.DataFrame(Err, columns=["r", "Error", "Error Ratio(RK4)"],index=index)
first_row = "h1/{}".format(C[0])
df.drop([first_row])



