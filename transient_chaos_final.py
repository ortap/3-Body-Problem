# -*- coding: utf-8 -*-
"""Transient_Chaos_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hZm6sLX2MRT72DjftUpLNL1nT7brcJvn
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import brentq

e=0.57
duration = 10000# s
h = 1e-1 # s

#Equation for Sitnikov motion of third massless object
def f(r,t):
  z=r[0]
  v=r[1]
  dzdt=v
  def nle(u):
    return -u+e*np.sin(u)+t
  root= brentq(nle, 0, 2e9) #Non linear equation solver
  r_=.5*(1-e*np.cos(root))
  dvdt=-z/(z**2+r_**2)**(3/2)
  
  return np.array([dzdt,dvdt],float)
  
rpoints= []
#Initial Condition 1
r= np.array([2.42223005,0],float)

tpoints= np.arange(0,duration,h)
for t in tpoints:
    neww=r.copy()
    rpoints.append(neww)

    k1 = h*f(r,t)
    k2 = h*f(r+0.5*k1,t+0.5*h)
    k3 = h*f(r+0.5*k2,t+0.5*h)
    k4 = h*f(r+k3,t+h)

    r += (k1+2*k2+2*k3+k4)/6

      
rpoints2=np.stack(rpoints)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import brentq

e=0.57
duration = 10000# s
h = 1e-1 # s

#Equation for Sitnikov motion of third massless object
def f(r,t):
  z=r[0]
  v=r[1]
  dzdt=v
  def nle(u):
    return -u+e*np.sin(u)+t
  root= brentq(nle, 0, 2e9) #Non linear equation solver
  r_=.5*(1-e*np.cos(root))
  dvdt=-z/(z**2+r_**2)**(3/2)
  
  return np.array([dzdt,dvdt],float)
  
rpoints= []
#Initial Condition 1
r= np.array([2.42223,0],float) #Second Initial Conidition

tpoints= np.arange(0,duration,h)
for t in tpoints:
    neww=r.copy()
    rpoints.append(neww)

    k1 = h*f(r,t)
    k2 = h*f(r+0.5*k1,t+0.5*h)
    k3 = h*f(r+0.5*k2,t+0.5*h)
    k4 = h*f(r+k3,t+h)

    r += (k1+2*k2+2*k3+k4)/6

      
rpoints3=np.stack(rpoints)

axes = plt.gca()
axes.set_xlabel('Time')
axes.set_ylabel('z')
#Change the time to see different stages of the chaos
axes.plot(tpoints, rpoints2[:,0],label="z(0)=2.42223")
axes.plot(tpoints, rpoints3[:,0], label="z(0)=2.42223005")
plt.legend()

#Save the file to import into the animation
np.savetxt('rpoints2.txt', rpoints2)
np.savetxt('rpoints3.txt', rpoints3)